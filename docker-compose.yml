services:
  auth_service:
    build:
      context: ./
      dockerfile: auth_service/Dockerfile
    container_name: auth_service
    env_file:
      - .env
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    depends_on:
      - postgres
      - redis
    volumes:
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build

  agent:
    build:
      context: ./
      dockerfile: agent/Dockerfile
    container_name: agent
    env_file:
      - .env
    ports:
      - ${AGENT_PORT}:${AGENT_PORT}
    depends_on:
      - orchestrator
    volumes:
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build

  orchestrator:
    build:
      context: ./
      dockerfile: orchestrator/Dockerfile
    container_name: orchestrator
    env_file:
      - .env
    ports:
      - ${ORCHESTRATOR_PORT}:${ORCHESTRATOR_PORT}
    depends_on:
      - auth_service
    volumes:
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build

  gateway:
    build:
      context: ./
      dockerfile: gateway/Dockerfile
    container_name: gateway
    env_file:
      - .env
    ports:
      - ${GATEWAY_PORT}:${GATEWAY_PORT}
    depends_on:
      - agent
      - orchestrator
      - auth_service
    volumes:
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build

  frontend:
    build:
      context: ./
      dockerfile: frontend/Dockerfile
    container_name: frontend
    env_file:
      - .env
    ports:
      - "8081:8081"
    depends_on:
      - agent
      - orchestrator
      - gateway
    volumes:
      - go-mod-cache:/go/pkg/mod
      - go-build-cache:/root/.cache/go-build

  postgres:
    image: postgres:latest
    container_name: postgres
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    expose:
      - ${REDIS_PORT}
    hostname: ${REDIS_HOST}
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli", "ping" ]
      interval: 5s
      timeout: 1s
      retries: 3
    restart: unless-stopped

volumes:
  go-mod-cache:
  go-build-cache:
  postgres_data:
  redis_data:
